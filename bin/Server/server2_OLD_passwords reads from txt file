package Server;
import java.io.*;
import java.net.*;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
//import java.util.ArrayList;
import java.util.Date;
import java.util.StringTokenizer;

import com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException;
import com.sun.org.apache.xml.internal.security.utils.Base64;

import CerificatesAndKeys.KeysAndCertificates;
import CerificatesAndKeys.MyMain;
import sun.misc.BASE64Encoder;

public class Server2 {
    public static void main(String args[]) {
    	
	int port = 6667;//6789;
	Server2 server = new Server2( port );
	server.startServer();
    }

    // declare a server socket and a client socket for the server;
    // declare the number of connections

    ServerSocket echoServer = null;
    Socket clientSocket = null;
    int numConnections = 0;
    int port;
	
    public Server2( int port ) {
	this.port = port;
    }

    public void stopServer() {
	System.out.println( "Server cleaning up." );
	System.exit(0);
    }

    public void startServer() {
	// Try to open a server socket on the given port
	// Note that we can't choose a port less than 1024 if we are not
	// privileged users (root)
	
        try {
	    echoServer = new ServerSocket(port);
        }
        catch (IOException e) {
	    System.out.println(e);
        }   
	
	System.out.println( "Server is started and is waiting for connections." );

	// Whenever a connection is received, start a new thread to process the connection
	// and wait for the next connection.
	
	while ( true ) {
	    try {
		clientSocket = echoServer.accept();
		numConnections ++;
		Server2Connection oneconnection = new Server2Connection(clientSocket, numConnections, this);
		new Thread(oneconnection).start();
	    }   
	    catch (IOException e) {
		System.out.println(e);
	    }
	}
    }
    
}

class Server2Connection implements Runnable {
    BufferedReader is;
    PrintStream os;
    Socket clientSocket;
    int id;
    Server2 server;
    ///
    DataInputStream in;
    DataOutputStream out;
	Date date = new Date();	

    public Server2Connection(Socket clientSocket, int id, Server2 server) {
	this.clientSocket = clientSocket;
	this.id = id;
	this.server = server;
	System.out.println( "Connection " + id + " established with: " + clientSocket + "at" + date);
	try {
		
		InputStream sin = clientSocket.getInputStream(); // input socket stream
		OutputStream sout = clientSocket.getOutputStream();// output socket stream
		in = new DataInputStream(sin);
		out = new DataOutputStream(sout);
		
	  //  is = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
	  //  os = new PrintStream(clientSocket.getOutputStream());
	} catch (IOException e) {
	    System.out.println(e);
	}
    }

    public void run() {
    	File passwordBase = new File("C:/CommunicationTest/CA/passwordBase.txt");
		boolean done = false;
    	String line = null;
        while (done != true) {
            try {
            	line = in.readUTF(); 	//waiting for text
				System.out.println("Client " + id + ": " + line);
            	if (line.startsWith(".q")){ 
            		done = true;
    				out.writeUTF(line); //sending echo
    				out.flush(); // waiting for the end of transmission
            	}
            	else if(line.startsWith(".SR")){
            		int i = 0;
            		StringTokenizer st = new StringTokenizer(line, ">>>");
            		//ArrayList<String> list = new ArrayList<String>();
            		String[] strArray = new String[st.countTokens()];
            		for (i = 0; i < strArray.length; i++){
            			strArray[i] = st.nextToken();
            		}
                		switch (i) {
						case 3:
							//rebuild user's certificate
							X509Certificate receivedCert = certificateFromText(strArray[2]);//stringcert2);
							String clientName = receivedCert.getSubjectDN().toString();
							X509Certificate signedReceivedCert = signatureRequestHandler(tokenUser(clientName, passwordBase, strArray[1]), receivedCert);
	        				byte[] clientsCertBytes = signedReceivedCert.getEncoded();
	        				BASE64Encoder encoder = new BASE64Encoder();
	        				String base64clientsCert = encoder.encodeBuffer(clientsCertBytes);
	        				System.out.println("!!!: " + base64clientsCert);
	        				out.writeUTF(base64clientsCert); 
	        				out.flush(); // waiting for the end of transmission
	        				break;

						default:
            				out.writeUTF("bad command"); //sending echo
            				out.flush(); // waiting for the end of transmission
							break;
						}
            	} 
            	else {
    				out.writeUTF(line); //sending echo
    				out.flush(); // waiting for the end of transmission
            	}
            } catch (Exception e) {
                    System.out.println(e);
                    done = true;   // force exit if there's a problem
            }
    }
        try {
            if (line.startsWith(".q")) done = true;
            Date exitDate = new Date();
          	System.out.println( "Connection " + id + " with: " + clientSocket + " was finished at " + exitDate);
        } catch (Exception e) {   // e.g. null
        	done = true;
  
        	//line = "[exiting]";
        }				
    }
    
    
    
    /*
     * 
     */
    
    
    
    public static X509Certificate signatureRequestHandler(boolean result, X509Certificate clientCertificate){
		 X509Certificate signedClientsCert = null;
		 if (result){
			 signedClientsCert = KeysAndCertificates.createSignedCertificate(clientCertificate, MyMain.rootCertificate, MyMain.rootPrivateKey);
			 System.out.println("Certificate was signed");
		 }
		 else{
			 System.out.println("Verification failed");
		 }
		 return signedClientsCert;
	 }
	 
	 public static X509Certificate certificateFromText(String certString) throws CertificateException, IOException, Base64DecodingException{
		 byte[] certBytes = Base64.decode(certString);
		
        CertificateFactory cf = CertificateFactory.getInstance("X.509");
        InputStream in = new ByteArrayInputStream(certBytes);
        X509Certificate cert = (X509Certificate) cf.generateCertificate(in);
        //bais.close();
		 return cert;		

	 }
	 
	 public static boolean tokenUser(String clientName, File passwordBase, String token) throws IOException{
		 boolean result = false;
		 FileInputStream fis = new FileInputStream(passwordBase);
		 byte[] content = new byte[fis.available()];
		 fis.read(content);
		 fis.close();
		 String[] lines = new String(content, "Cp1251").split("\n");
		 int i = 1;
		 for (String line : lines){
		 		 if (line.startsWith(clientName)){ 
		 			StringTokenizer st = new StringTokenizer(line, ">>>");
		 		//	ArrayList<String> list = new ArrayList<String>();
		 			String[] strArray = new String[st.countTokens()];
		 	 		for (i = 0; i < strArray.length; i++){
		 	 			strArray[i] = st.nextToken(); 	     		
		 	 		} 
		 	 		if (strArray[1].equals(token)){
		 	 			result = true;
						System.out.println("Verification completed");
		 	 		}
		 	 		else{
						System.out.println("Token doesn't match");
		 	 		}
		 		 }
		 		 i++;
		 }
		 return result;
	 }
	 



    
    
}
